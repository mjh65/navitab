/*
 *  Navitab - Navigation tablet for VR flight simulation
 *  Copyright (C) 2024 Michael Hasling
 *  Significantly derived from Avitab
 *  Copyright (C) 2018-2024 Folke Will <folko@solhost.org>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <cassert>
#include <memory>
#include <functional>
#include <vector>
#include "navitab/deferred.h"

// The Window class acts as a container for the 5 parts of the UI:
// the Canvas, Toolbar, Modebar, Doodler, and Keypad.
// The architecture allows the Toolbar, Modebar, Doodler and Keypad
// to be implemented remotely (specifically directly in the html/jscript
// of the MSFS panel), so there are separate interfaces defined for these.
// But the Canvas represents the generic drawing area for the Navitab
// apps/modes. It doesn't have enough special behaviour, so its interface
// is just wrapped into the Window class.

namespace navitab {

struct CoreServices;
class Settings;
struct Window;
struct PartPainter;
struct Toolbar;
struct Modebar;
struct Doodler;
struct Keypad;
class FrameRegion;
class FrameBuffer;

// The PartPainter interface defines the services the UI window provides to the
// window parts, which is basically a request to paint the window part.

struct PartPainter
{
    // This is called whenever one of the window parts has been updated and needs repainting.
    virtual void Paint(int part, const FrameBuffer* src, const std::vector<FrameRegion>& updates) = 0;
};

// The WindowControls interface defines the services the UI window provides to the
// Navitab core system.

struct WindowControls
{
    // Adjust the brightness of the display
    virtual void Brightness(int percent) = 0;
};

// The Window interface defines the services that the UI window provides
// to the application/plugin shell.

struct Window
{
    enum {
        TOOLBAR_HEIGHT = 24,
        MODEBAR_WIDTH = 40,
        MODEBAR_HEIGHT = MODEBAR_WIDTH * 7 + 24, // 8 mode selectors, one smaller!
        KEYPAD_HEIGHT = 200,
        WIN_MIN_WIDTH = 400,
        WIN_STD_WIDTH = 800,
        WIN_MAX_WIDTH = 1600,
        WIN_MIN_HEIGHT = TOOLBAR_HEIGHT + MODEBAR_HEIGHT,
        WIN_STD_HEIGHT = 480,
        WIN_MAX_HEIGHT = 1000,
    };

    // ===============================================================
    // Factory function to create a GUI window object. There will be
    // one of these in each of the simulator-specific libraries.
    static std::shared_ptr<Window> Factory();

    // ===============================================================
    // APIs called from the application/plugin

    // Initialisation and shutdown of the window.
    virtual void Connect(std::shared_ptr<CoreServices> core) = 0;
    virtual void Disconnect() = 0;

    // Run the event loop and return when the window is closed.
    virtual void EventLoop() = 0;

    virtual ~Window() = default;
};

// The FrameRegion stucture defines a rectangular area, typically for the purposes
// of updating when only a smaller part of the image has been modified.

struct FrameRegion
{
    int left, top, right, bottom;
    FrameRegion(int l, int t, int r, int b) : left(l), top(t), right(r), bottom(b) {}
};

// FrameBuffer objects contain RGBA pixel data that has been generated by
// some part of the Navitab core, and is then given to the window interface
// to be rendered.

class FrameBuffer
{
public:
    FrameBuffer(int w, int h) : width(w), height(h) { data.resize(width * height); }
    ~FrameBuffer() = default;

    void Clear(uint32_t px) { std::fill(data.begin(), data.end(), px); }
    int Width() const { return width; }
    int Height() const { return height; }

    void PaintIcon(int x, int y, const uint32_t *pix, int w, int h);

    uint32_t* Row(int r) { return &data[r * width]; }
    std::vector<uint32_t>::iterator PixAt(int y, int x) { return data.begin() + (y * width + x); }
    std::vector<uint32_t>::const_iterator PixAt(int y, int x) const { return data.begin() + (y * width + x); }
    const std::vector<uint32_t>& Data() const { return data; }

private:
    int width;
    int height;
    std::vector<uint32_t> data;
};

// Each window part (toolbar, modebar, canvas, doodler, keypad) implements
// this interface so that the window manager can pass on UI events of interest.

class WindowPart : public DeferredJobRunner<>
{
public:
    enum {
        CANVAS,
        TOOLBAR,
        MODEBAR,
        DOODLER,
        KEYPAD,
        TOTAL_PARTS
    };

    // Set the interface to the painter this window part should work with.
    // This may be called 'mid-flight' as the client window can change when
    // switching to/from VR.
    void SetPainter(std::shared_ptr<PartPainter> p) {
        RunLater([this, p]() { onSetPainter(p); });
    }
    void PostResize(int w, int h) {
        RunLater([this, w, h]() { onResize(w, h); });
    }
    void PostMouseEvent(int x, int y, bool l, bool r) {
        RunLater([this, x, y, l, r]() { onMouseEvent(x, y, l, r); });
    }
    void PostWheelEvent(int x, int y, int xdir, int ydir) {
        RunLater([this, x, y, xdir, ydir]() { onWheelEvent(x, y, xdir, ydir); });
    }
    void PostKeyEvent(int code) {
        RunLater([this, code]() { onKeyEvent(code); });
    }

protected:
    // Called at start, and then whenever the window part is resized.
    virtual void onResize(int width, int height) { assert(0); }

    // Called when a mouse event occurs. Includes movement while a button is down.
    // Position coordinates are relative to canvas top-left.
    virtual void onMouseEvent(int x, int y, bool l, bool r) { assert(0); }

    // Called when scroll wheel events occur.
    virtual void onWheelEvent(int x, int y, int xdir, int ydir) { assert(0); }

    // Called when key events occur.
    virtual void onKeyEvent(int code) { assert(0); }

protected:
    WindowPart(int id) : partId(id) { }
    ~WindowPart() = default;

    void onSetPainter(std::shared_ptr<PartPainter> p) {
        painter = p;
    }

    void Redraw() {
        if (dirtyBits.empty()) return;
        painter->Paint(partId, image.get(), dirtyBits);
        dirtyBits.clear();
    }

protected:
    int const partId;
    std::shared_ptr<PartPainter> painter;
    std::unique_ptr<FrameBuffer> image;
    int width, height;
    std::vector<FrameRegion> dirtyBits;

};

inline void FrameBuffer::PaintIcon(int x, int y, const uint32_t *pix, int w, int h)
{
    assert(x >= 0);
    assert(y >= 0);
    assert((x + w) <= width);
    assert((y + h) <= height);

    for (int iy = 0; iy < h; ++iy) {
        uint32_t *d = &data[((y + iy) * width) + x];
        const uint32_t *s = pix + iy * w;
        memcpy(d, s, w * sizeof(uint32_t));
    }
}



} // namespace navitab
