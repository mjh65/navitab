/*
 *  Navitab - Navigation tablet for VR flight simulation
 *  Copyright (C) 2024 Michael Hasling
 *  Significantly derived from Avitab
 *  Copyright (C) 2018-2024 Folke Will <folko@solhost.org>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <cassert>
#include <stdint.h>
#include <vector>

namespace navitab {

class ImageBuffer;
class ImageRegion;

// TextureBuffer objects contain RGBA pixel data that has been generated by
// some part of the Navitab core, and is then given to the window interface
// to be rendered. The window interface creates a TextureBuffer for each of
// the window parts, sized to accomodate the largest area that the window
// part can be expanded to. The actual width and height are adapted when the
// pixel data is delivered (see the PartPainter interface).

class TextureBuffer
{
public:
    TextureBuffer(int mw, int mh) : maxWidth(mw), maxHeight(mh), width(0), height(0), isTexRegistered(false) { data.resize(mw * mh); }
    ~TextureBuffer() = default;

    int Width() const { return width; }
    int Height() const { return height; }
    const uint32_t* Data() const { return data.data(); }

    void Resize(int w, int h) { assert(w <= maxWidth); width = w; assert(h <= maxHeight); height = h; isTexRegistered = false; }
    bool NeedsRegistration() { auto nr = !isTexRegistered; isTexRegistered = true; return nr; }

    void CopyRegionsFrom(const ImageBuffer* src, const std::vector<ImageRegion>& regions);

private:
    int const maxWidth, maxHeight;
    int width, height;
    std::vector<uint32_t> data;
    bool isTexRegistered;
};

} // namespace navitab
